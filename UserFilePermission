
package hanumancorporation;

import java.io.File;
import java.util.Objects;

/**
 * Class to define the File Permissions . Class represents a file and a string 
 * to represent the permissions associated with that file for a single user.
 * @author k8port
 */
public class UserFilePermission {
    
    // data fields
    /** The file for which the user is being granted access. */
    private File file;
    /** The file access granted to user for the file. */
    private String permissions;
    
    // constructors
    /** 
     * Constructor with parameters.
     * @param theFile the file for which the user is being granted access
     * @param thePermission the access granted to the user for the file
     */
    public UserFilePermission(File theFile, String thePermission) {
        if (theFile == null) {
            System.out.println("Error: No subject specified.");
            throw new NullPointerException();
        }
        file = new File(theFile.getAbsolutePath());
        permissions = thePermission;
    }
    
    /**
     * Copy constructor.
     * @param aUxFilePermission the user file permission to copy
     */
    public UserFilePermission(UserFilePermission aUxFilePermission) {
        if (aUxFilePermission == null) {
            System.out.println("Error: No UserFilePermission to copy.");
            throw new NullPointerException();
        }
        file = new File(aUxFilePermission.file.getAbsolutePath());
        permissions = aUxFilePermission.permissions;
    }
    
    // methods
    /**
     * Change the file.
     * @param newFile the new file
     */
    public void setFile(File newFile) {
        if (newFile == null) {
            System.out.println("Error: null subject.");
            throw new NullPointerException();
        }
        file = new File(newFile.getAbsolutePath());
    }
    
    /**
     * Access the file.
     * @return the new file
     */
    public File getFile() {return file;}
    
    /**
     * Change the permissions.
     * @param newPermission the new permissions
     */
    public void setPermissions(Permissions newPermission) {
        permissions = newPermission.toString();
    }
    
    /**
     * Access the permissions.
     * @return the permissions
     */
    public String getPermissions() {return permissions;}
    
    /**
     * A string representation of the user file permission.
     * @return a string representing the user file permission
     */
    @Override
    public String toString() {
        return file.getAbsolutePath() + ": " + permissions + "; ";
    }
    
    /**
     * Test equality for two user file permissions.
     * @param other the other user file permission
     * @return true if the same
     */
    @Override
    public boolean equals(Object other) {
        if (other == null)
            return false;
        else if (getClass() != other.getClass())
            return false;
        else {
            UserFilePermission otherUFP = (UserFilePermission) other;
            return file.equals(otherUFP.file) 
                    && permissions.equals(otherUFP.permissions);
        }
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 71 * hash + Objects.hashCode(this.file);
        hash = 71 * hash + Objects.hashCode(this.permissions);
        return hash;
    }
    
}
