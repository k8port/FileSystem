package hanumancorporation;

import java.util.Random;
import java.util.Objects;



/**
 * Class to define a password. A password object is a string of symbols, letters
 * and/or digits of 8-12 character length. The password is encrypted using a 
 * password salt and a hash algorithm and stored in the files etc/passwd and
 * etc/shadow. When the system must determine if passwords match it compares
 * encryption results to see if they match.
 * @author k8port
 */
public class Password {
    
    // data fields
    /** Flag indicating if program is running in debug mode. */
    private static final boolean DEBUG = true;
    /** A 64 bit salt. */
    private static final int SALT_LENGTH = 16;
    /** An array containing the first 16 prime numbers. */
    private static final int[] PRIMES = 
    {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59};
    /** A char array of letters digits and symbols picked by user. */
    private String word;
    /** An string containing the random hex salt for the password. */
    private final String salt;
    
    // constructors
    /**
     * Constructor with parameter.
     * @param theWord the password chosen by the user
     */
    public Password(char[] theWord) {
        if (DEBUG)
            System.out.println("inside Password:Pasword(param)");
        if (theWord == null)
            throw new NullPointerException();
        salt = generateSalt();
        word = hashPassword(theWord, salt);
    }
    
    /**
     * To access salt in order to store user record in etc/passwd and etc/shadow.
     * @return the unique salt assigned to the user.
     */
    public String getSalt() {
        if (DEBUG)
            System.out.println("inside Password:getSalt()");
        return salt;
    }

    /**
     * Creates a hash value of the salted password.
     * @param x the password chosen by the user
     * @param userSalt the salt of the users password
     * @return a hexadecimal hash of the salted password
     */
    public static String hashPassword(char[] x, String userSalt) {
        if (DEBUG)
            System.out.println("inside Password:hashPassword(param, param)");
        // append the password to the salt 
        String a = new String(x);
        String appended = a + userSalt; 
        
        // place the string in a single byte array
        byte[] saltyword = appended.getBytes();
        int[] hashedword = new int[saltyword.length];
        
        // hash the byte array 
        // an invented hash function based on a rudimentary understanding
        // but basic ignorance of how actual hash functions work
        for (int i = 0; i < saltyword.length; i++) {
            hashedword[i] = saltyword[i];
            for (int j = 0; j < PRIMES.length; j++) 
                hashedword[i] ^= (int) Math.sqrt(PRIMES[j]);
        }
        
        // return as hex string
        StringBuilder sb = new StringBuilder();
        for (int k = 0; k < hashedword.length; k++) {
            sb.append(Integer.toHexString(hashedword[k]));
        }
        return sb.toString();
    }
    
    /**
     * Generate a random salt value to append to password.
     * @return a hexadecimal string of the random salt value
     */
    private String generateSalt() {
        if (DEBUG)
            System.out.println("inside Password:generateSalt()");
        Random prng = new Random(System.currentTimeMillis());
        StringBuilder sb = new StringBuilder();
        int[] x = new int[SALT_LENGTH];
        for (int i = 0; i < x.length; i++) 
            x[i] = prng.nextInt();
        for (int j = 0; j < x.length; j++) 
            sb.append(Integer.toHexString(x[j]));
        return sb.toString();
    }
    
    /** 
     * A string representing the hexadecimal hashed and salted password.
     * @return a string of the password
     */
    @Override
    public String toString() {
        if (DEBUG)
            System.out.println("inside Password:toString()");
        return word; 
    }
    
    /**
     * Tests two passwords for equality
     * @param other the other object
     * @return true if the same object
     */
    @Override
    public boolean equals(Object other) {
        if (DEBUG)
            System.out.println("inside Password:equals(param)");
        if (other == null) 
            return false;
        else if (getClass() != other.getClass())
            return false;
        else {
            Password xWord = (Password) other;
            return (salt.equals(xWord.salt) && word.equals(xWord.word));
        }
    }

    @Override
    public int hashCode() {
        if (DEBUG)
            System.out.println("inside Password:hashCode()");
        int hash = 5;
        hash = 97 * hash + Objects.hashCode(this.word);
        hash = 97 * hash + Objects.hashCode(this.salt);
        return hash;
    }
}
